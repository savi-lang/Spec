:trait val Spec.Run.Any
  :fun val run(process Spec.Process) None // TODO: fun box instead of fun val

:class val Spec.Run(A Spec)
  :is Spec.Run.Any
  :let env Env
  :let _effects _Effects

  :new val (@env)
    @_effects = _Effects.Direct.new(@env)

  :new val with_capture(@env, effects _Effects.Capture)
    @_effects = effects

  // TODO: avoid this indirection
  :fun _new_spec(process) A
    A.new(
      Spec.Context.new(
        @env, A.describes, "", @_effects, process, _Runner.None.new
      )
    )

  :: Run all spec features for the Spec type indicated by the type argument,
  :: using the given Env to construct an instance of that Spec type.
  ::
  :: A summary of successes and failures will be printed to `env.out`.
  :: If there are one or more failures, `env.exit_code` will be set accordingly.
  :fun val run(process Spec.Process) None // TODO: fun box instead of fun val
    type ReflectionOfType(A) = reflection_of_type @_new_spec(process)
    features = type.features.select -> (feature |
      feature.tags.includes("it")
    )

    process.spec_began(A.describes, features.size)

    features.each -> (feature |
      _Runner(A).new(@env, @_effects, process, feature)
    )
