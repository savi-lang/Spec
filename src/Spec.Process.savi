:actor Spec.Process
  :let env Spec.Env
  :let reporter Spec.Reporter
  :var spec_count USize
  :let statuses: Map.Ordered(String, Spec.Status).new

  :const timed_ping_seconds U64: 5
  :const timeout_seconds U64: 30
  :let _timer: _Timer.new(@)

  :new _new(@env, @spec_count)
    @reporter = Spec.Reporter.Linear.new(@env, @statuses
      Spec.Reporter.Full.new(@env, @statuses)
    )
    @overall_began

  :fun non _run(env Spec.Env, runners Array(Spec.Run.Any)) // TODO: shouldn't need this indirection
    process = @_new(env, runners.size)
    runners.each -> (runner | runner.run(process))

  :fun non run(env (Env | Spec.Env), runners Array(Spec.Run.Any)) // TODO: shouldn't need this indirection
    case env <: (
    | Env |
      @_run(Spec.Env.new(env), runners)
    | Spec.Env |
      @_run(env, runners)
    )

  :be _timed_ping
    @statuses.each -> (spec, spec_status |
      spec_status.examples.each -> (example, example_status |
        next unless example_status.is_waiting_to_end

        @reporter.example_timed_ping(spec, example)
      )
    )

  :be _timed_out
    @statuses.each -> (spec, spec_status |
      spec_status.examples.each -> (example, example_status |
        next unless example_status.is_waiting_to_end

        @reporter.example_timed_out(spec, example)
        example_status._runner.dispose
        @env.fail
      )
    )
    @overall_ended

  :be spec_began(spec String, expected_examples USize)
    // TODO: complain if spec is empty or duplicate
    status = Spec.Status.new(spec)
    status.expected_examples = expected_examples
    @statuses[spec] = status
    @reporter.spec_began(spec)


  :fun ref overall_began
    @reporter.overall_began

  :fun ref overall_ended
    @reporter.overall_ended
    @_timer.dispose
    @env.done

  :fun ref spec_ended(spec String)
    try (
      status = @statuses[spec]!
      status.is_ended = True
      status.examples.each -> (example, example_status |
        if example_status.is_ended.not (
          @env.bug("spec_ended before all of its examples ended")
        )
      )
      @reporter.spec_ended(spec)

      // If now all specs have ended, then we know we've ended overall.
      if (@statuses.has_all -> (_, s | s.is_ended)) @overall_ended
    |
      @env.bug("spec_ended before the spec_began")
    )

  :be example_began(spec String, example String, runner _Runner.Any):
    // TODO: complain if example is empty or duplicate
    try (
      @statuses[spec]!.examples[example] =
        Spec.Status.ForExample.new(example, runner)
      @reporter.example_began(spec, example)
    |
      @env.bug("example_began before the spec_began")
    )

  :be example_close(spec String, example String)
    try (
      status = @statuses[spec]!.examples[example]!
      status.is_synchronous_portion_ended = True
      if status.is_ready_to_end @_example_ended(spec, example)
    |
      @env.bug("example_close before the example_began")
    )

  :fun ref _example_ended(spec String, example String)
    try (
      status = @statuses[spec]!
      example_status = status.examples[example]!
      example_status.is_ended = True
      example_status._runner.dispose

      stats = Spec.Statistics.ForExample.from_assertions(example_status.assertions)
      @reporter.example_ended(spec, example, stats)

      if (
        status.examples.size >= status.expected_examples
        && status.examples.has_all -> (_, es | es.is_ended)
      ) (
        @spec_ended(spec)
      )
    |
      @env.bug("example_ended before the example_began")
    )

  :be enqueue(assertion Spec.Assert)
    spec = assertion.spec
    example = assertion.example

    // If it was a failed assertion, mark the entire process as a failure.
    if !assertion.success @env.fail

    try (
      status = @statuses[spec]!.examples[example]!
      status.assertions << assertion
      @reporter.assertion(spec, example, assertion)
      if status.is_ready_to_end @_example_ended(spec, example)
    |
      @env.bug("assert before the example_began and/or spec_began")
    )
