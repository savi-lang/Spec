:trait val Spec.Assert
  :let spec String
  :let example String
  :let success Bool
  :let pos SourceCodePosition

  :: The format_failure function will generate a specific failure message
  :: for the different kinds of assertions.
  :fun format_failure Array(String): []

  :fun non condition(
    caller Spec.Context.Holder
    success Bool
    pos SourceCodePosition = source_code_position_of_argument caller
  )
    ctx = caller.ctx
    assert = Spec.Assert.Condition.new(
      ctx.spec
      ctx.example
      success
      pos
    )
    ctx._process.enqueue(assert)

  :fun non relation(
    caller Spec.Context.Holder
    op String
    lhs Any'box
    rhs Any'box
    success Bool
    pos SourceCodePosition = source_code_position_of_argument caller
  )
    ctx = caller.ctx
    assert = Spec.Assert.Relation.new(
      ctx.spec
      ctx.example
      success
      pos
      op
      Inspect[lhs]
      Inspect[rhs]
    )
    ctx._process.enqueue(assert)

  :fun non type_relation(
    caller Spec.Context.Holder
    op String
    lhs Any'box
    rhs String
    success Bool
    pos SourceCodePosition = source_code_position_of_argument caller
  )
    ctx = caller.ctx
    assert = Spec.Assert.TypeRelation.new(
      ctx.spec
      ctx.example
      success
      pos
      op
      Inspect[lhs]
      rhs
    )
    ctx._process.enqueue(assert)

  :fun non has_error(
    caller Spec.Context.Holder
    has_error Bool
    expects_error Bool
    pos SourceCodePosition = source_code_position_of_argument caller
  )
    ctx = caller.ctx
    assert = Spec.Assert.HasError.new(
      ctx.spec
      ctx.example
      if expects_error (has_error | !has_error)
      pos
      expects_error
    )
    ctx._process.enqueue(assert)

  :fun file_and_line String
    line = @pos.row + 1
    "# \(@pos.filepath_rootpkgrel): \(line.format.decimal)"

  :fun indent(times USize, msg String) String
    String.join([" " * times, msg])

:class val Spec.Assert.Condition
  :is Spec.Assert

  :new val (@spec, @example, @success, @pos)

  :fun format_failure Array(String)
    [
      ""
      @indent(4, "FAIL: \(@pos.string)")
      ""
      @indent(4, "Expected to be True")
      ""
      @indent(4, @file_and_line)
    ]

:class val Spec.Assert.Relation
  :is Spec.Assert

  :let op String
  :let lhs String
  :let rhs String

  :new val (@spec, @example, @success, @pos, @op, @lhs, @rhs)

  :fun format_failure Array(String)
    [
      ""
      @indent(4, "FAIL: \(@pos.string)")
      ""
      @indent(4, "Expected")
      @indent(6, @lhs)
      @indent(4, "to \(@op)")
      @indent(6, @rhs)
      ""
      @indent(4, @file_and_line)
    ]

:class val Spec.Assert.TypeRelation
  :is Spec.Assert

  :let op String
  :let lhs String
  :let rhs String

  :new val (@spec, @example, @success, @pos, @op, @lhs, @rhs)

  :fun format_failure Array(String)
    expectation = if (@op == "<:") ("to be a subtype of" | "not to be a subtype of")
    [
      ""
      @indent(4, "FAIL: \(@pos.string)")
      ""
      @indent(4, "Expected \(@lhs) \(expectation) \(@rhs)")
      ""
      @indent(4, @file_and_line)
    ]

:class val Spec.Assert.HasError
  :is Spec.Assert

  :let expects_error Bool

  :new val (@spec, @example, @success, @pos, @expects_error)

  :fun format_failure Array(String)
    expectation = if @expects_error (
      "Expected to raise an error"
    |
      "Not expected to raise an error"
    )

    [
      ""
      @indent(4, "FAIL: \(@pos.string)")
      ""
      @indent(4, expectation)
      ""
      @indent(4, @file_and_line)
    ]

:class val Spec.Assert.WaitForAction
  :is Spec.Assert
  :let action String
  :new val (@spec, @example, @action, @pos): @success = True

:class val Spec.Assert.FinishedAction
  :is Spec.Assert
  :let action String
  :new val (@spec, @example, @action, @pos): @success = True
